# leetcode: min-stack
* leetcode 에서 스칼라 버그 때문에 스칼라 안돔;

## 문제
* Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
** push(x) -- Push element x onto stack.
** pop() -- Removes the element on top of the stack.
** top() -- Get the top element.
** getMin() -- Retrieve the minimum element in the stack.

## solve python3
* python 사용이 적어서 top 가져오는 걸 헷갈렸음.
* Runtime: 156 ms, faster than 27.49%
* Memory Usage: 16.3 MB, less than 100.00%

[source,python]
----
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        self.sorted = []

    def push(self, x: int) -> None:
        self.stack[len(self.stack):] = [x] # equal to self.stack.append(x)
        self.sorted[len(self.sorted):] = [x]
        self.sorted.sort()

    def pop(self) -> None:
        self.sorted.remove(self.stack.pop())

    def top(self) -> int:
        return self.stack[len(self.stack)-1]

    def getMin(self) -> int:
        return self.sorted[0]
----

## solve scala
* 버그로 인해 안돔

[source,scala]
----
class MinStack() {

    /** initialize your data structure here. */
    var sorted = scala.collection.mutable.ListBuffer.empty[Int]
    var stack = scala.collection.mutable.ListBuffer.empty[Int]

    def push(x: Int) {
        sorted += x
        sorted = sorted.sorted
        stack += x
    }

    def pop() {
        sorted -= stack.head
        stack = stack.tail
    }

    def top(): Int = {
        stack.head
    }

    def getMin(): Int = {
        sorted.head
    }

}
----
